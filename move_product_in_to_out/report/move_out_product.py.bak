################################################################################ -*- coding: utf-8 -*-

###############################################################################
#
#    Periodical Sales Report
#
#    Copyright (C) 2019 Aminia Technology
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

from odoo import api, models
from dateutil.relativedelta import relativedelta
import datetime
import logging
_logger = logging.getLogger(__name__)

class ReportProductmove(models.AbstractModel):
    _name = 'report.move_product_out.report_move_out_product'

    @api.model
    def _get_report_values(self, docids, data=None):
        date_from = data['form']['date_from']
        date_to = data['form']['date_to']
        pro=data['form']['product']
         
        total_sale = 0.0
        period_value = ''
        domain=[]
        if date_from and date_to:
            domain = [('date_order', '>=', date_from),
                      ('date_order', '<=', date_to)]
        elif date_from  :
            domain = [('date_order', '>=', date_from)]
        elif  date_to:
            domain = [ ('date_order', '<=', date_to)]
         
         
        sale_orders = []
        order_line=[]
        orders = self.env['sale.order'].search(domain)
         
        order_lines=self.env['sale.order.line'].search([])
        _logger.info(order_lines)
        _logger.info('PRODUCT')
        _logger.info(type(pro))
        for rec in orders:
            total_sale=0
            count_invoice=0
            
            if rec.invoice_ids and rec.picking_ids.date_done:
                count_invoice=len(rec.invoice_ids)
                for order in rec.order_line:
                        _logger.info(type(order.product_id.id))
                        _logger.info(pro)
                        if order.qty_delivered:
                            if pro : 
                                if pro==order.product_id.id:
                                    sale_orders.append({
                                        'name': rec.name,
                                        'product_id':order.product_id.name,
                                        'date_one': rec.picking_ids.date_done,
                                        'partner' : order.order_id.partner_id.name,
                                        'amount_total' : order.price_subtotal,
                                        'order_id':order.order_id.name,
                                        'quantity':order.qty_delivered,
                                        'price_unit':order.price_unit,
                                        'count_invoice':count_invoice,
                                        'total':order.price_subtotal,
                                        'pro_id':order.product_id,
                                        'category':order.product_id.categ_id

                                     
                                    })
                            else:
                                sale_orders.append({
                                        'name': rec.name,
                                        'product_id':order.product_id.name,
                                        'date_one': rec.picking_ids.date_done,
                                        'partner' : order.order_id.partner_id.name,
                                        'amount_total' : order.price_subtotal,
                                        'order_id':order.order_id.name,
                                        'quantity':order.qty_delivered,
                                        'price_unit':order.price_unit,
                                        'count_invoice':count_invoice,
                                        'total':order.price_subtotal,
                                        'pro_id':order.product_id,
                                        'category':order.product_id.categ_id

                                     
                                    })


         

        return {
            'doc_ids': data['ids'],
            'doc_model': data['model'],
            'period' : period_value,
            'date_from': date_from,
            'date_to': date_to,
            'sale_orders' : sale_orders,
            'total_sale' : total_sale,
        }