from odoo import api, fields, models, _
import odoo.addons.decimal_precision as dp
from odoo.exceptions import ValidationError,UserError
import logging
import datetime as dt
from datetime import datetime, timedelta
import calendar
import re
_logger = logging.getLogger(__name__)

class consildate_report(models.Model):
    #_name='consildate.sale.report'
    _inherit="sale.order.line"

    user_id=fields.Many2one('res.users','Sale rep',default=lambda self: self.env.uid)
    customer=fields.Many2one('res.partner','Customer')
    region=fields.Many2one('sale.region','Region')
    order_date=fields.Date('Order Date')
    pro_code=fields.Char('Product Code')
     

    
    @api.constrains('product_id')
    def get_data_line(self):
        _logger.info(self.order_id)
        sale_order=self.env['sale.order'].search([('id','=',self.order_id.id)])
        _logger.info(sale_order)
        self.user_id=sale_order.user_id
        self.region=sale_order.partner_id.region
        self.customer=sale_order.partner_id
        #self.order_date=  datetime.strftime(sale_order.create_date,'%Y-%m-%d')
        self.pro_code=self.product_id.code_product
        
    
         

class consildate_report(models.Model):
    _name='consildate.sale.report'
    name=fields.Char('name',default="Consildate Sale Report")
    #_inherit="sale.order.line"
    user_id=fields.Many2one('res.users','Sale rep')
    customer=fields.Many2one('res.partner','Customer',domain="[('customer','=',True)]")
    region=fields.Many2one('sale.region','Region')
    Date_from=fields.Date('Date From')
    Date_to=fields.Date('Date To')

    def search_report(self):
        _logger.info('Date from')
        _logger.info(self.Date_from)
         
        ids=[]
        str_domain=""
        if self.Date_from and self.Date_to and self.Date_to<=self.Date_from:
            raise ValidationError('Date To must be greater than Date From')
            return True
          
        visits=self.env['sale.order.line'].search([]) 
        res=[] 
        for record in visits:
            res.append((record.id))
        if   self.Date_from:

            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('order_date','>=',self.Date_from)]) 
        if   self.Date_to:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('order_date','<=',self.Date_to)])
        if self.customer  :
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('customer','=',self.customer.id) ])
        
        if self.user_id:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('user_id','=',self.user_id.id)])
            
        if self.region:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('region','=',self.region.id)])
        
        

        for rec in visits:
            ids.append(rec.id)

        _logger.info(visits)
        return { 'name':'/',
          
        'view_mode': 'pivot',
        'res_model': 'sale.order.line',
        'target': 'main',
         'domain':"[('id','in',%s)]"%(ids),
         'context':{ },
        'type': 'ir.actions.act_window',
        
         
                   }   
