from odoo import api, fields, models, _
import odoo.addons.decimal_precision as dp
from odoo.exceptions import ValidationError,UserError
import logging
import datetime as dt
from datetime import datetime, timedelta
import calendar
import re
_logger = logging.getLogger(__name__)

class sale_vs_forecast(models.Model):
    #_name='consildate.sale.report'
    _inherit="sale.order.line"
    year_date=fields.Integer('Year')
    month_date=fields.Char('Month')
    forecast_Qty=fields.Float('Forecast Qty ') 
    forecast_value=fields.Float('Forecast Value ')
    @api.constrains('product_id')
    def get_date_format(self):
        self.year_date=int(self.create_date.strftime('%Y'))
        self.month_date=self.create_date.strftime('%B')
        #dt.datetime.strptime(self.create_date,'%Y-%m-%d').strftime('%B')
        
        _logger.info('Forecast Search')
        res=[]
       
        forcast_search=self.env['forecast.product'].search(['&',('sales_person','=',self.user_id.id),('product_id','=',self.product_id.id)])
        for record in forcast_search:
            if self.create_date.date()<=record.period_end_date and self.create_date.date()>=record.period_start_date:
                
                res.append((record.id)) 
        _logger.info(forcast_search)

        #for record in forcast_search:
            #res.append((record.id))
        forcast_search=self.env['forecast.product'].search([('id','in',res)])
        
        

        
        _logger.info(forcast_search)
        if forcast_search:
            for rec in forcast_search: 
               self.forecast_Qty+=rec.forecast_qty
               self.forecast_value+=rec.forecast_value
    
         

class sale_vs_forecast(models.Model):
    _name='sale.vs.forecast'
    _description = "Sales Vs Forecast report"
    name=fields.Char('name',default='Sales Vs Forecast report') 
    #_inherit="sale.order.line"
    user_id=fields.Many2one('res.users','Sale rep')
    customer=fields.Many2one('res.partner','Customer',domain="[('customer','=',True)]")
    region=fields.Many2one('sale.region','Region')
    Date_from=fields.Date('Date From')
    Date_to=fields.Date('Date To')
    product_id = fields.Many2one('product.product', string='Product')

    def search_report(self):
        _logger.info('Date from')
        _logger.info(self.Date_from)
         
        ids=[]
        str_domain=""
        if self.Date_from and self.Date_to and self.Date_to<=self.Date_from:
            raise ValidationError('Date To must be greater than Date From')
            return True
          
        visits=self.env['sale.order.line'].search([]) 
        res=[] 
        for record in visits:
            res.append((record.id))
        if   self.Date_from:

            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('order_date','>=',self.Date_from)]) 
        if   self.Date_to:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('order_date','<=',self.Date_to)])
        if self.customer  :
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('customer','=',self.customer.id) ])
        
        if self.user_id:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('user_id','=',self.user_id.id)])
            
        if self.region:
            _logger.info(visits)
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('region','=',self.region.id)])
        if self.product_id:
            for record in visits:
                res.append((record.id))
            visits=visits.search(['&',('id','in',res),('product_id','=',self.product_id.id)])
        

        for rec in visits:
            ids.append(rec.id)
        view_id_pivot=self.env.ref('Sales_Vs_Forecast Report.view_sales_vs_forecast_pivote').id

        view_id_tree=self.env.ref('Sales_Vs_Forecast Report.view_sales_vs_forecast_tree').id

        _logger.info(view_id_pivot)
        return { 'name':'',
        'view_mode': 'tree,pivot', 
        'view_mode': 'pivot', 
        'views': [(view_id_tree,'tree'),(view_id_pivot, 'pivot')], 
        
        'res_model': 'sale.order.line',
        'target': 'main',
         'domain':"[('id','in',%s)]"%(ids),
         'context':{ },
        'type': 'ir.actions.act_window',
        
         
                   }   
 